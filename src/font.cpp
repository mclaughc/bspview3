#include "pch.h"
#include "font.h"
#include "buffer.h"
#include "hud.h"
#include "shader.h"
#include "statistics.h"
#include "texture.h"
#include "util.h"
#include "vertex_array.h"

static constexpr u32 VERTEX_BUFFER_SIZE = 16384;
static constexpr u32 MAX_VERTICES_PER_DRAW = 512;

struct StaticGlyphInfo
{
  u32 xpos;
  u32 ypos;
  u32 width;
  u32 height;
  s32 xoffset;
  s32 yoffset;
  u32 xadvance;
  u32 yadvance;
};
static const StaticGlyphInfo s_glyph_info[256] = {
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 8, 15, 8, 15},
  {118, 19, 1, 9, 3, 2, 8, 15},  {51, 46, 3, 4, 2, 2, 8, 15},   {119, 39, 8, 10, 0, 1, 8, 15},
  {3, 41, 7, 11, 1, 2, 8, 15},   {11, 38, 8, 9, 0, 2, 8, 15},   {83, 39, 7, 9, 1, 2, 8, 15},
  {5, 3, 1, 4, 3, 2, 8, 15},     {0, 28, 3, 12, 3, 0, 8, 15},   {72, 36, 6, 15, 2, 0, 8, 15},
  {91, 41, 7, 6, 1, 2, 8, 15},   {20, 36, 7, 7, 0, 3, 8, 15},   {44, 11, 3, 4, 2, 9, 8, 15},
  {1, 6, 3, 1, 2, 7, 8, 15},     {26, 9, 2, 2, 3, 9, 8, 15},    {65, 36, 6, 11, 1, 2, 8, 15},
  {4, 28, 7, 9, 1, 2, 8, 15},    {0, 18, 5, 9, 2, 2, 8, 15},    {86, 29, 7, 9, 1, 2, 8, 15},
  {120, 29, 7, 9, 1, 2, 8, 15},  {94, 31, 7, 9, 1, 2, 8, 15},   {102, 33, 7, 9, 1, 2, 8, 15},
  {110, 33, 7, 9, 1, 2, 8, 15},  {36, 36, 7, 9, 1, 2, 8, 15},   {44, 36, 7, 9, 1, 2, 8, 15},
  {28, 36, 7, 9, 1, 2, 8, 15},   {115, 19, 2, 7, 3, 4, 8, 15},  {79, 36, 3, 9, 2, 4, 8, 15},
  {35, 51, 7, 6, 1, 4, 8, 15},   {99, 43, 7, 4, 1, 5, 8, 15},   {12, 48, 7, 6, 1, 4, 8, 15},
  {52, 36, 5, 9, 1, 2, 8, 15},   {27, 46, 7, 11, 1, 2, 8, 15},  {100, 11, 7, 9, 1, 2, 8, 15},
  {36, 12, 7, 9, 1, 2, 8, 15},   {44, 16, 7, 9, 1, 2, 8, 15},   {28, 16, 7, 9, 1, 2, 8, 15},
  {52, 16, 7, 9, 1, 2, 8, 15},   {60, 15, 7, 9, 1, 2, 8, 15},   {20, 16, 7, 9, 1, 2, 8, 15},
  {68, 16, 7, 9, 1, 2, 8, 15},   {108, 11, 5, 9, 1, 2, 8, 15},  {14, 16, 5, 9, 1, 2, 8, 15},
  {76, 16, 6, 9, 1, 2, 8, 15},   {83, 16, 7, 9, 1, 2, 8, 15},   {6, 18, 7, 9, 1, 2, 8, 15},
  {91, 19, 7, 9, 1, 2, 8, 15},   {120, 19, 7, 9, 1, 2, 8, 15},  {99, 21, 7, 9, 1, 2, 8, 15},
  {107, 21, 7, 11, 1, 2, 8, 15}, {36, 26, 8, 9, 1, 2, 8, 15},   {45, 26, 7, 9, 1, 2, 8, 15},
  {28, 26, 7, 9, 0, 2, 8, 15},   {53, 26, 7, 9, 1, 2, 8, 15},   {20, 26, 7, 9, 1, 2, 8, 15},
  {61, 26, 8, 9, 0, 2, 8, 15},   {70, 26, 7, 9, 1, 2, 8, 15},   {78, 26, 7, 9, 0, 2, 8, 15},
  {12, 28, 7, 9, 1, 2, 8, 15},   {107, 43, 5, 15, 3, 0, 8, 15}, {58, 36, 6, 11, 1, 2, 8, 15},
  {20, 44, 6, 15, 2, 0, 8, 15},  {35, 46, 7, 4, 0, 2, 8, 15},   {98, 48, 8, 1, 0, 13, 8, 15},
  {19, 0, 2, 2, 3, 1, 8, 15},    {0, 0, 6, 7, 1, 4, 8, 15},     {7, 0, 7, 15, 1, 0, 8, 15},
  {15, 0, 6, 7, 1, 4, 8, 15},    {22, 0, 6, 11, 1, 0, 8, 15},   {29, 0, 6, 7, 1, 4, 8, 15},
  {36, 0, 5, 11, 1, 0, 8, 15},   {42, 0, 6, 10, 1, 4, 8, 15},   {49, 0, 7, 15, 1, 0, 8, 15},
  {57, 0, 5, 11, 1, 0, 8, 15},   {63, 0, 4, 14, 1, 0, 8, 15},   {68, 0, 7, 15, 1, 0, 8, 15},
  {76, 0, 7, 15, 1, 0, 8, 15},   {84, 0, 7, 7, 1, 4, 8, 15},    {49, 4, 6, 7, 1, 4, 8, 15},
  {92, 0, 6, 7, 1, 4, 8, 15},    {99, 0, 6, 10, 1, 4, 8, 15},   {106, 0, 6, 10, 1, 4, 8, 15},
  {113, 0, 5, 7, 2, 4, 8, 15},   {119, 0, 6, 7, 1, 4, 8, 15},   {0, 8, 6, 9, 1, 2, 8, 15},
  {15, 8, 6, 7, 1, 4, 8, 15},    {29, 8, 6, 7, 1, 4, 8, 15},    {84, 8, 8, 7, 0, 4, 8, 15},
  {121, 8, 6, 7, 1, 4, 8, 15},   {114, 8, 6, 10, 1, 4, 8, 15},  {93, 11, 6, 7, 1, 4, 8, 15},
  {113, 43, 5, 12, 1, 0, 8, 15}, {0, 0, 0, 0, 0, 0, 0, 0},      {43, 46, 7, 15, 1, 0, 8, 15},
  {36, 22, 7, 2, 1, 6, 8, 15},   {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},      {0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0}};

static constexpr u32 FONT_TEXTURE_WIDTH = 128;
static constexpr u32 FONT_TEXTURE_HEIGHT = 64;

static const u8 s_font_texture_bits[FONT_TEXTURE_WIDTH * FONT_TEXTURE_HEIGHT / 8] = {
  0x9C, 0x00, 0x0E, 0xC8, 0x83, 0xF9, 0x02, 0x08, 0x14, 0x70, 0xF0, 0xE7, 0xF9, 0xF8, 0x1E, 0x0F, 0xA2, 0x00, 0x11,
  0x68, 0x46, 0xCC, 0x02, 0x00, 0x10, 0x40, 0x90, 0x34, 0x9B, 0xCD, 0xA6, 0x10, 0xA0, 0x80, 0x00, 0x28, 0x44, 0x84,
  0x02, 0x00, 0x10, 0x40, 0x90, 0x14, 0x0A, 0x85, 0x82, 0x00, 0xBE, 0x80, 0x00, 0xE8, 0x47, 0x84, 0x02, 0x00, 0x10,
  0x40, 0x90, 0x14, 0x0A, 0x85, 0x02, 0x0F, 0xA1, 0x8F, 0x80, 0x2F, 0xF0, 0x85, 0x3A, 0x0E, 0x17, 0x41, 0x90, 0x14,
  0x0A, 0x85, 0x02, 0x10, 0xB1, 0x19, 0xD1, 0x6C, 0x44, 0xCC, 0x46, 0x08, 0x94, 0x40, 0x90, 0x34, 0x9B, 0xCD, 0x82,
  0x10, 0xAE, 0x10, 0x4E, 0xC8, 0x43, 0xB8, 0x42, 0x08, 0x54, 0x40, 0x90, 0xE4, 0xF9, 0xB8, 0x02, 0x0F, 0x80, 0x10,
  0x40, 0x08, 0x40, 0x80, 0x42, 0x08, 0x74, 0x40, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x84, 0x90, 0x50, 0x28, 0x44,
  0x88, 0x42, 0x08, 0x94, 0x40, 0x10, 0x08, 0x08, 0x80, 0x84, 0x66, 0x84, 0x99, 0xD0, 0x6C, 0x46, 0x70, 0x42, 0x08,
  0x14, 0x41, 0x10, 0x08, 0x08, 0x80, 0x88, 0x24, 0xBF, 0x8F, 0x90, 0x4F, 0x42, 0x00, 0x42, 0x3E, 0x14, 0x82, 0xA3,
  0x05, 0x00, 0x00, 0x48, 0x18, 0x04, 0x80, 0x10, 0x40, 0x02, 0x60, 0x00, 0x00, 0x04, 0x00, 0xA0, 0xE5, 0x87, 0xF0,
  0x49, 0x18, 0x04, 0x80, 0x10, 0xC0, 0xF3, 0x63, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x05, 0x44, 0x41, 0x50, 0x18, 0x04,
  0x80, 0x18, 0x80, 0x11, 0x24, 0x00, 0x80, 0x03, 0x00, 0x40, 0x02, 0x42, 0x41, 0x30, 0x24, 0x04, 0x00, 0x17, 0x80,
  0x11, 0x14, 0x00, 0x00, 0x00, 0x00, 0x40, 0x82, 0x41, 0x41, 0x20, 0x66, 0x04, 0x00, 0x00, 0x00, 0x10, 0x04, 0x00,
  0xF0, 0x07, 0x00, 0x00, 0x40, 0x20, 0x42, 0x20, 0x00, 0x38, 0x00, 0xC7, 0xF3, 0xF1, 0xC3, 0xF3, 0x17, 0x10, 0x14,
  0x0A, 0x20, 0x20, 0x42, 0x10, 0x00, 0x00, 0x00, 0x24, 0x14, 0x12, 0x24, 0x14, 0x10, 0x10, 0x14, 0x09, 0xE0, 0xE7,
  0x43, 0x18, 0x00, 0xC7, 0x18, 0x14, 0x10, 0x14, 0x14, 0x10, 0x10, 0x10, 0x94, 0x08, 0x00, 0x30, 0x46, 0x00, 0x00,
  0xC4, 0x18, 0x14, 0x10, 0x14, 0x14, 0x10, 0xF0, 0x17, 0x54, 0x08, 0x18, 0x12, 0xF4, 0x59, 0x1C, 0x44, 0x15, 0x14,
  0x16, 0xF4, 0x13, 0xF0, 0x17, 0xF0, 0x77, 0x08, 0x18, 0x02, 0x00, 0x58, 0x22, 0x44, 0x15, 0x14, 0x14, 0x04, 0x10,
  0x10, 0x10, 0x10, 0x94, 0x08, 0x28, 0xFA, 0xE1, 0x40, 0x41, 0x44, 0x15, 0x14, 0x14, 0xE4, 0x14, 0x10, 0x10, 0x10,
  0x14, 0x09, 0x28, 0x0A, 0x13, 0x41, 0x41, 0x44, 0x52, 0x24, 0x14, 0x12, 0x23, 0x14, 0x10, 0x10, 0x14, 0x09, 0x48,
  0x0A, 0x0A, 0x42, 0x41, 0x44, 0x90, 0xC3, 0xF3, 0x01, 0xC0, 0xF3, 0x07, 0x10, 0x14, 0xFA, 0x8B, 0x0A, 0x0A, 0x5A,
  0x41, 0x44, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x0A, 0x0B, 0x1A, 0x41, 0x5F, 0x10,
  0x10, 0xF4, 0xF7, 0xC3, 0x27, 0x28, 0xD0, 0x58, 0x10, 0x08, 0xFB, 0x09, 0x42, 0x22, 0x00, 0x00, 0x30, 0x86, 0x10,
  0x66, 0x28, 0x28, 0x90, 0x88, 0x08, 0x08, 0x0B, 0x08, 0x42, 0x1C, 0xC6, 0xF1, 0x27, 0x82, 0x10, 0x24, 0x20, 0x28,
  0x10, 0x05, 0x05, 0x00, 0x08, 0x10, 0x03, 0x00, 0x22, 0x02, 0x26, 0x82, 0x10, 0x64, 0x20, 0x48, 0x0B, 0x07, 0x85,
  0x0F, 0x08, 0xE0, 0x01, 0x3E, 0x12, 0x04, 0x23, 0x82, 0xF0, 0xC3, 0x27, 0x48, 0x0B, 0x02, 0x42, 0x18, 0x00, 0x80,
  0x01, 0x41, 0x11, 0x04, 0x41, 0x81, 0x10, 0x02, 0x2C, 0x48, 0x0B, 0x05, 0x02, 0x10, 0x0C, 0x00, 0x01, 0x40, 0x91,
  0x84, 0x40, 0x81, 0x10, 0x04, 0x28, 0xC8, 0x8C, 0x0D, 0x02, 0x10, 0x0A, 0x00, 0x00, 0x60, 0x11, 0x44, 0x40, 0x81,
  0x10, 0x24, 0x2C, 0xC8, 0x8C, 0x08, 0x02, 0x08, 0xCB, 0x0F, 0x0F, 0x1C, 0x11, 0x64, 0x80, 0x80, 0x10, 0xC8, 0xC7,
  0xC7, 0x4C, 0x10, 0x02, 0x06, 0x49, 0x80, 0x10, 0x60, 0x21, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x83, 0x48, 0x40, 0x00, 0x40, 0xC1, 0xF1, 0x87, 0xE0, 0xF1, 0xE7, 0xE3, 0x04, 0x40, 0x01, 0x83, 0x40, 0xC8,
  0x47, 0x0F, 0x61, 0x02, 0x00, 0x80, 0x30, 0x02, 0x12, 0x14, 0x09, 0x20, 0x02, 0xC3, 0xDF, 0x1F, 0xD8, 0x18, 0x3E,
  0x02, 0x30, 0x80, 0x10, 0x04, 0x12, 0x04, 0x09, 0x20, 0x02, 0x00, 0x00, 0x08, 0x50, 0x10, 0x00, 0x04, 0x48, 0xF0,
  0x17, 0x04, 0x11, 0x84, 0x10, 0x10, 0x04, 0xE0, 0x00, 0x08, 0x50, 0x10, 0x24, 0x00, 0x48, 0x80, 0x30, 0x06, 0xE1,
  0x43, 0x10, 0x10, 0x04, 0x10, 0x00, 0x40, 0x98, 0x18, 0x24, 0x40, 0x30, 0x82, 0xE0, 0x85, 0x30, 0x46, 0x10, 0x08,
  0x04, 0x13, 0x40, 0x80, 0x07, 0x0F, 0x34, 0xF0, 0xC1, 0x81, 0x00, 0xC4, 0x10, 0x04, 0x20, 0x08, 0x04, 0x33, 0x48,
  0x02, 0x00, 0x00, 0x7F, 0x48, 0x32, 0x03, 0x10, 0x42, 0x30, 0x44, 0x20, 0x08, 0x04, 0x49, 0xF2, 0xF9, 0x3B, 0x38,
  0x12, 0x48, 0x80, 0x74, 0xE0, 0x21, 0xE0, 0x43, 0x40, 0x04, 0x84, 0xC8, 0xE2, 0x00, 0x08, 0x08, 0x12, 0x70, 0x80,
  0x44, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x02, 0x88, 0x5A, 0x03, 0x08, 0x88, 0x3F, 0xC0, 0x01, 0x43, 0xE0, 0x41,
  0x38, 0x28, 0x80, 0x02, 0x02, 0x18, 0x41, 0xF8, 0x0B, 0x08, 0x0A, 0x40, 0x02, 0x40, 0x30, 0xA3, 0x20, 0x28, 0x00,
  0x00, 0x03, 0xF0, 0x02, 0x00, 0x08, 0x08, 0x09, 0x48, 0x12, 0x40, 0x10, 0x12, 0x21, 0x28, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFC, 0x0B, 0x06, 0x09, 0xF0, 0xE1, 0x40, 0x88, 0x1B, 0x23, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
  0x08, 0x00, 0x40, 0x00, 0x47, 0x48, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x40,
  0x00, 0x47, 0x48, 0x02, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0xE0, 0x40, 0x48,
  0xC2, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x40, 0x88, 0x3B, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x40, 0x10, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x38, 0x30, 0x00, 0x00, 0x00, 0x70, 0x30, 0xC0, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const char s_vertex_shader[] = R"(
#version %d

in vec2 in_position;
in vec2 in_tex0;
in vec4 in_color;

out vec2 v_tex;
out vec4 v_col;

void main()
{
  gl_Position = vec4(in_position, 0.0, 1.0);
  v_tex = in_tex0;
  v_col = in_color;
}
)";

static const char s_fragment_shader[] = R"(
#version %d

uniform sampler2D samp0;

in vec2 v_tex;
in vec4 v_col;

out vec4 ocol0;

void main()
{
  ocol0 = texture(samp0, v_tex).rrrr * v_col;
}
)";

Font::Font(std::unique_ptr<ShaderProgram> program, std::unique_ptr<Texture> texture)
  : m_program(std::move(program)), m_texture(std::move(texture))
{
  FillGlyphInfo();
}

Font::~Font() {}

s32 Font::GetTextWidth(const char* text)
{
  s32 width = 0;
  size_t remaining_chars = std::strlen(text);
  while (remaining_chars > 0)
  {
    const GlyphInfo& gi = m_glyphs[*(text++)];
    width += gi.xadvance;
  }

  return width;
}

void Font::RenderText(s32 x, s32 y, u32 color, const char* text)
{
  if (!g_hud->BeginDraw(GL_TRIANGLES))
    return;

  m_program->Bind();
  m_texture->Bind(0);

  glDisable(GL_DEPTH_TEST);
  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

  s32 current_x = x;
  s32 current_y = y;
  size_t remaining_chars = std::strlen(text);
  while (remaining_chars > 0)
  {
    const GlyphInfo& gi = m_glyphs[*(text++)];
    if (gi.skip)
    {
      current_x += gi.xadvance;
      remaining_chars--;
      continue;
    }

    const s32 x0 = current_x + gi.x0;
    const s32 x1 = current_x + gi.x1;
    const s32 y0 = current_y + gi.y0;
    const s32 y1 = current_y + gi.y1;

    g_hud->AddVertex2D(x0, y0, gi.u0, gi.v0, color);
    g_hud->AddVertex2D(x1, y0, gi.u1, gi.v0, color);
    g_hud->AddVertex2D(x0, y1, gi.u0, gi.v1, color);
    g_hud->AddVertex2D(x0, y1, gi.u0, gi.v1, color);
    g_hud->AddVertex2D(x1, y0, gi.u1, gi.v0, color);
    g_hud->AddVertex2D(x1, y1, gi.u1, gi.v1, color);

    current_x += gi.xadvance;
    remaining_chars--;
  }

  g_hud->EndDraw();

  glDisable(GL_BLEND);
}

void Font::RenderFormattedText(s32 x, s32 y, u32 color, const char* format, ...)
{
  va_list ap;
  va_start(ap, format);
  std::string str = Util::StringFromFormatV(format, ap);
  va_end(ap);

  return RenderText(x, y, color, str.c_str());
}

std::unique_ptr<Font> Font::Create()
{
  std::vector<u8> texture_data(FONT_TEXTURE_WIDTH * FONT_TEXTURE_HEIGHT);
  size_t opos = 0;
  for (size_t ipos = 0; ipos < ARRAY_SIZE(s_font_texture_bits); ipos++)
  {
    const u8 val = s_font_texture_bits[ipos];
    texture_data[opos++] = (val & 0x01) ? 0xFF : 0x00;
    texture_data[opos++] = (val & 0x02) ? 0xFF : 0x00;
    texture_data[opos++] = (val & 0x04) ? 0xFF : 0x00;
    texture_data[opos++] = (val & 0x08) ? 0xFF : 0x00;
    texture_data[opos++] = (val & 0x10) ? 0xFF : 0x00;
    texture_data[opos++] = (val & 0x20) ? 0xFF : 0x00;
    texture_data[opos++] = (val & 0x40) ? 0xFF : 0x00;
    texture_data[opos++] = (val & 0x80) ? 0xFF : 0x00;
  }

  std::unique_ptr<Texture> texture = Texture::Create(Texture::Format::FORMAT_R8, FONT_TEXTURE_WIDTH,
                                                     FONT_TEXTURE_HEIGHT, 1, texture_data.data(), false, false, false);
  if (!texture)
    return nullptr;

  std::string vertex_shader_str = Util::StringFromFormat(s_vertex_shader, 330);
  std::string fragment_shader_str = Util::StringFromFormat(s_fragment_shader, 330);
  std::unique_ptr<Shader> vertex_shader =
    Shader::Create(GL_VERTEX_SHADER, vertex_shader_str.c_str(), vertex_shader_str.length());
  std::unique_ptr<Shader> fragment_shader =
    Shader::Create(GL_FRAGMENT_SHADER, fragment_shader_str.c_str(), fragment_shader_str.length());
  if (!vertex_shader || !fragment_shader)
    return nullptr;

  std::unique_ptr<ShaderProgram> program = ShaderProgram::Create(
    HUD::GetHUDVertexAttributes(), HUD::GetHUDVertexAttributeCount(), vertex_shader.get(), fragment_shader.get(), 1);
  if (!program)
    return nullptr;

  return std::unique_ptr<Font>(new Font(std::move(program), std::move(texture)));
}

void Font::FillGlyphInfo()
{
  const float rcp_width = 1.0f / static_cast<float>(m_texture->GetWidth());
  const float rcp_height = 1.0f / static_cast<float>(m_texture->GetHeight());

  for (size_t i = 0; i < NUM_CHARS; i++)
  {
    const StaticGlyphInfo& sgi = s_glyph_info[i];
    GlyphInfo& dgi = m_glyphs[i];

    dgi.u0 = static_cast<float>(sgi.xpos) * rcp_width;
    dgi.v0 = static_cast<float>(sgi.ypos) * rcp_height;
    dgi.u1 = static_cast<float>(sgi.xpos + sgi.width) * rcp_width;
    dgi.v1 = static_cast<float>(sgi.ypos + sgi.height) * rcp_height;
    dgi.x0 = sgi.xoffset;
    dgi.x1 = sgi.xoffset + sgi.width;
    dgi.y0 = sgi.yoffset;
    dgi.y1 = sgi.yoffset + sgi.height;
    dgi.xadvance = sgi.xadvance;
    dgi.yadvance = sgi.yadvance;
    dgi.skip = (sgi.width == 0 || sgi.height == 0);
  }
}
